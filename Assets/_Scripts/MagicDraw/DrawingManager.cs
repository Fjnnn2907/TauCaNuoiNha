using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class DrawingManager : MonoBehaviour
{
    public List<SymbolPattern> patterns;
    public LineRenderer lineRenderer;
    public TMP_Text resultText;
    public SymbolManager symbolManager;
    public ScoreManager scoreManager; // Th√™m l·∫°i ScoreManager

    private List<Vector2> drawnPoints = new List<Vector2>();
    private bool isDrawing = false;

    // Th√™m c√°c tham s·ªë ƒë·ªÉ l·ªçc ƒëi·ªÉm
    private const float MIN_DISTANCE = 0.1f; // Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c ƒëi·ªÉm
    private Vector2 lastAddedPoint;

    void Start()
    {
        lineRenderer.startColor = Color.green;
        // T·∫°o 5 m·∫´u v·∫Ω
        SymbolPattern circle = new SymbolPattern { name = "circle" };
        for (int i = 0; i < 24; i++)
        {
            float angle = i * Mathf.Deg2Rad * (360f / 24f);
            circle.points.Add(new Vector2(Mathf.Cos(angle), Mathf.Sin(angle)));
        }

        SymbolPattern zigzag = new SymbolPattern
        {
            name = "zigzag",
            points = new List<Vector2>
            {
                new Vector2(-1f, 1f),
                new Vector2(0.0f, 1f),
                new Vector2(-1f, 0f),
                new Vector2(0f, 0f),
                new Vector2(-1f, -1f)
            }
        };

        SymbolPattern vshape = new SymbolPattern
        {
            name = "vshape",
            points = new List<Vector2>
            {
                new Vector2(-1f, 1f),
                new Vector2(0f, -1f),
                new Vector2(1f, 1f)
            }
        };

        // Th√™m pattern cho square (h√¨nh vu√¥ng)
        SymbolPattern square = new SymbolPattern
        {
            name = "square",
            points = new List<Vector2>
            {
                new Vector2(-0.8f, -0.8f), // G√≥c d∆∞·ªõi tr√°i
                new Vector2(0.8f, -0.8f),  // G√≥c d∆∞·ªõi ph·∫£i
                new Vector2(0.8f, 0.8f),   // G√≥c tr√™n ph·∫£i
                new Vector2(-0.8f, 0.8f),  // G√≥c tr√™n tr√°i
                new Vector2(-0.8f, -0.8f)  // ƒê√≥ng h√¨nh (v·ªÅ ƒëi·ªÉm ƒë·∫ßu)
            }
        };

        // Th√™m pattern cho triangle (h√¨nh tam gi√°c)
        SymbolPattern triangle = new SymbolPattern
        {
            name = "triangle",
            points = new List<Vector2>
            {
                new Vector2(0f, 0.8f),     // ƒê·ªânh tam gi√°c
                new Vector2(-0.8f, -0.8f), // G√≥c d∆∞·ªõi tr√°i
                new Vector2(0.8f, -0.8f),  // G√≥c d∆∞·ªõi ph·∫£i
                new Vector2(0f, 0.8f)      // ƒê√≥ng h√¨nh (v·ªÅ ƒë·ªânh)
            }
        };



        patterns = new List<SymbolPattern> { circle, zigzag, vshape, square, triangle };

        // T·∫°o symbol ƒë·∫ßu ti√™n
        if (symbolManager != null)
        {
            symbolManager.GenerateNewSymbol();
        }

        // B·∫Øt ƒë·∫ßu minigame v·ªõi ƒë·ªô kh√≥ Easy
        if (scoreManager != null)
        {
            scoreManager.StartMinigame(DifficultyLevel.Easy);
        }

        ClearDrawing();
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            isDrawing = true;
            drawnPoints.Clear();
            lineRenderer.positionCount = 0;
        }

        if (Input.GetMouseButton(0) && isDrawing)
        {
            Vector2 point = Camera.main.ScreenToWorldPoint(Input.mousePosition);

            // Ch·ªâ th√™m ƒëi·ªÉm n·∫øu ƒë·ªß xa ƒëi·ªÉm cu·ªëi c√πng
            if (drawnPoints.Count == 0 || Vector2.Distance(point, lastAddedPoint) >= MIN_DISTANCE)
            {
                drawnPoints.Add(point);
                lastAddedPoint = point;
                lineRenderer.positionCount = drawnPoints.Count;
                lineRenderer.SetPosition(drawnPoints.Count - 1, point);
            }
        }

        if (Input.GetMouseButtonUp(0) && isDrawing)
        {
            isDrawing = false;

            // T·ªëi ∆∞u h√≥a ƒëi·ªÉm tr∆∞·ªõc khi nh·∫≠n d·∫°ng
            var optimizedPoints = OptimizePoints(drawnPoints);
            RecognizeSymbol(optimizedPoints);
        }
    }

    // H√†m t·ªëi ∆∞u h√≥a ƒëi·ªÉm - lo·∫°i b·ªè ƒëi·ªÉm th·ª´a v√† l√†m m∆∞·ª£t
    List<Vector2> OptimizePoints(List<Vector2> points)
    {
        if (points.Count <= 2) return points;

        List<Vector2> optimized = new List<Vector2>();
        optimized.Add(points[0]); // Lu√¥n gi·ªØ ƒëi·ªÉm ƒë·∫ßu

        for (int i = 1; i < points.Count - 1; i++)
        {
            Vector2 prev = points[i - 1];
            Vector2 current = points[i];
            Vector2 next = points[i + 1];

            // T√≠nh g√≥c gi·ªØa 3 ƒëi·ªÉm li√™n ti·∫øp
            Vector2 dir1 = (current - prev).normalized;
            Vector2 dir2 = (next - current).normalized;
            float angle = Vector2.Angle(dir1, dir2);

            // Ch·ªâ gi·ªØ ƒëi·ªÉm n·∫øu g√≥c thay ƒë·ªïi ƒë·ªß l·ªõn ho·∫∑c kho·∫£ng c√°ch ƒë·ªß xa
            float distance = Vector2.Distance(prev, current);
            if (angle > 15f || distance > MIN_DISTANCE * 2f)
            {
                optimized.Add(current);
            }
        }

        optimized.Add(points[points.Count - 1]); // Lu√¥n gi·ªØ ƒëi·ªÉm cu·ªëi
        return optimized;
    }

    void RecognizeSymbol(List<Vector2> points)
    {
        string predicted = SimpleRecognizer.Recognize(points, patterns);

        if (predicted == symbolManager.currentSymbol)
        {
            string format = LanguageManager.Instance.GetText("draw_correct");
            resultText.text = string.Format(format, scoreManager?.pointsPerCorrectAnswer ?? 20);
            resultText.color = Color.green;

            // TƒÉng ƒëi·ªÉm khi nh·∫≠n d·∫°ng ƒë√∫ng
            scoreManager?.AddScore();
        }
        else
        {
            string format = LanguageManager.Instance.GetText("draw_wrong");
            resultText.text = string.Format(format, scoreManager?.pointsDeductionPerWrong ?? 5);
            resultText.color = Color.red;

            // Tr·ª´ ƒëi·ªÉm khi v·∫Ω sai
            scoreManager?.DeductScore();
        }

        Invoke(nameof(ResetForNext), 1.5f);
    }


    void ResetForNext()
    {
        resultText.text = "";
        resultText.color = Color.white;
        lineRenderer.positionCount = 0;

        // T·∫°o symbol m·ªõi
        if (symbolManager != null)
        {
            symbolManager.GenerateNewSymbol();
        }
    }

    // X√≥a v·∫Ω hi·ªán t·∫°i
    public void ClearDrawing()
    {
        drawnPoints.Clear();
        lineRenderer.positionCount = 0;
        resultText.text = "";
        resultText.color = Color.white;
    }

    string FakeRecognizer(List<Vector2> points)
    {
        // üí° T·∫°m nh·∫≠n d·∫°ng si√™u ƒë∆°n gi·∫£n b·∫±ng ƒë·ªô d√†i v√† h∆∞·ªõng
        if (points.Count < 5) return "vshape";

        Vector2 start = points[0];
        Vector2 end = points[points.Count - 1];
        float dx = Mathf.Abs(end.x - start.x);
        float dy = Mathf.Abs(end.y - start.y);

        if (dx < 0.5f && dy > 1f) return "circle";
        if (dx > dy) return "zigzag";
        return "vshape";
    }
}
[System.Serializable]
public class SymbolPattern
{
    public string name;
    public List<Vector2> points = new List<Vector2>();
}
